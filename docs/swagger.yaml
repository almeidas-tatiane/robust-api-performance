openapi: 3.0.3
info:
  title: Robust API - Performance Testing
  description: Postman collection for testing JWT-based robust API for performance testing purposes.
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local server on port 3001
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: userPerformance1
                password: Performance
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request, missing username or password or user exists
        '500':
          description: Server error
      security:
        - bearerAuth: []
  /login:
    post:
      summary: Login and obtain JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: admin
                password: password
      responses:
        '200':
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
        '500':
          description: Server error
  /items:
    get:
      summary: Get all items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized, missing or invalid token
        '500':
          description: Server error
    post:
      summary: Create a new item
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
            example:
              name: Example Item
              description: For testing
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request, missing name
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /items/{id}:
    get:
      summary: Get an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized
        '404':
          description: Item not found
        '500':
          description: Server error
    put:
      summary: Update an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
            example:
              name: Performance Book2
              description: For production
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Item not found
        '500':
          description: Server error
    delete:
      summary: Delete an item by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID to delete
          schema:
            type: string
      responses:
        '204':
          description: Item deleted successfully (no content)
        '401':
          description: Unauthorized
        '404':
          description: Item not found
        '500':
          description: Server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Item:
      type: object
      properties:
        _id:
          type: string
          description: Item ID
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
      required:
        - _id
        - name
    ItemCreate:
      type: object
      properties:
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
      required:
        - name
    ItemUpdate:
      type: object
      properties:
        name:
          type: string
          description: Item name
        description:
          type: string
          description: Item description
